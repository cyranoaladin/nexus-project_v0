name: Tests

on:
  push:
    branches: [ ops/e2e-stability-stack-v2 ]
  pull_request:
    branches: [ main ]

jobs:
  audit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate npm audit report (JSON)
        run: npm audit --json > audit-report.json || true

      - name: Evaluate vulnerabilities (fail on moderate+)
        run: |
          node -e '
          const fs = require("fs");
          const p = "audit-report.json";
          if (!fs.existsSync(p)) { console.error("No audit-report.json produced"); process.exit(1); }
          const data = JSON.parse(fs.readFileSync(p, "utf8"));
          const v = (data.metadata && data.metadata.vulnerabilities) || {};
          const low = v.low || 0; const moderate = v.moderate || 0; const high = v.high || 0; const critical = v.critical || 0;
          console.log(`Vulnerabilities => low:${low} moderate:${moderate} high:${high} critical:${critical}`);
          if ((moderate + high + critical) > 0) { console.error("Failing: vulnerabilities at moderate or higher detected"); process.exit(1); }
          '

      - name: Upload npm audit report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-report
          path: audit-report.json
          retention-days: 7

  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate ephemeral NEXTAUTH_SECRET
        run: echo "NEXTAUTH_SECRET=$(openssl rand -hex 32)" >> $GITHUB_ENV

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Prepare database schema (db push)
        env:
          DATABASE_URL: file:./prisma/dev.db
        run: npx prisma db push --accept-data-loss

      - name: Enforce unique constraint for payments (method, externalId)
        env:
          DATABASE_URL: file:./prisma/dev.db
        run: |
          npx prisma db execute --url "$DATABASE_URL" --stdin <<'SQL'
          -- Deduplicate duplicates keeping the earliest rowid
          DELETE FROM payments
          WHERE externalId IS NOT NULL
            AND rowid NOT IN (
              SELECT MIN(rowid)
              FROM payments
              WHERE externalId IS NOT NULL
              GROUP BY method, externalId
            );

          -- Create partial unique index (SQLite supports WHERE)
          CREATE UNIQUE INDEX IF NOT EXISTS ux_payments_method_externalid_nonnull
          ON payments (method, externalId)
          WHERE externalId IS NOT NULL;
          SQL

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Lint
        run: npm run lint

      - name: Run unit tests (Jest)
        env:
          DATABASE_URL: file:./prisma/dev.db
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:unit -- --watchAll=false

      - name: Run integration tests (Jest)
        env:
          DATABASE_URL: file:./prisma/dev.db
          NEXTAUTH_URL: http://localhost:3000
        run: npm run test:integration -- --watchAll=false

      - name: Run Playwright E2E (Chromium)
        env:
          DATABASE_URL: file:./prisma/dev.db
          NEXTAUTH_URL: http://localhost:3000
        run: npx playwright test -c playwright.config.ts --project=chromium

      - name: Upload Playwright report (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report
          retention-days: 7

