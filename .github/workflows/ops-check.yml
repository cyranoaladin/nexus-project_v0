name: Operational Stack Check

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

jobs:
  ops-check:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Start services (Docker Compose)
        run: |
          docker compose up -d db redis minio rag_service pdf_generator_service llm_service next-app

      - name: Wait for Next app health
        run: |
          for i in {1..60}; do
            if curl -sf http://localhost:3000/api/health >/dev/null; then exit 0; fi
            sleep 5
          done
          echo "Next app health did not become ready" >&2
          exit 1

      - name: Health check JSON
        run: |
          curl -sS http://localhost:3000/api/health | jq -e '.ok == true'

      - name: Guard against duplicate payment_records
        run: |
          set -e
          # Query DB inside container to avoid exposing credentials
          DUPES=$(docker compose exec -T db psql -U postgres -d nexus_dev -t -c "SELECT COUNT(*) FROM (SELECT provider, \"externalId\", COUNT(*) c FROM payment_records GROUP BY 1,2 HAVING COUNT(*)>1) d" | tr -d '[:space:]')
          echo "duplicate_tuples=${DUPES}"
          if [ "${DUPES}" != "0" ]; then
            echo "Found duplicate (provider, externalId) tuples in payment_records" >&2
            exit 1
          fi

      - name: ARIA JSON smoke
        run: |
          curl -sS -X POST http://localhost:3000/api/aria/chat \
            -H 'Content-Type: application/json' \
            -d '{"message":"Bonjour","subject":"MATHEMATIQUES","stub":true}' | jq -e '.response | type=="string"'

      - name: ARIA SSE smoke
        run: |
          set -e
          LINE=$(curl -sS -m 5 -N 'http://localhost:3000/api/aria/chat?stream=1' \
            -H 'Content-Type: application/json' \
            -d '{"message":"Test SSE","subject":"MATHEMATIQUES"}' | head -n 1)
          echo "$LINE" | grep -q 'event: token'

      - name: Bilan PDF flow
        run: |
          set -e
          RESP=$(curl -sS -X POST 'http://localhost:3000/api/bilan/submit?e2e=1' -H 'Content-Type: application/json' -d '{"qcmAnswers":{},"pedagoAnswers":{}}')
          echo "$RESP" | jq -c .
          BID=$(echo "$RESP" | jq -r '.bilanId // .id')
          test -n "$BID"
          curl -sS -o /dev/null -w '%{http_code}\n' "http://localhost:3000/api/bilan/pdf?bilanId=$BID&variant=eleve&dev=1" | grep -qE '^(200|202|404|302)$'
          curl -sS -o /dev/null -w '%{http_code}\n' "http://localhost:3000/api/bilan/pdf?bilanId=$BID&variant=parent&dev=1" | grep -qE '^(200|202|404|302)$'

      - name: RAG upload
        run: |
          set -e
          curl -sS -c /tmp/cookies.txt -X POST http://localhost:3000/api/test/login -H 'Content-Type: application/json' -d '{"role":"ADMIN"}' | jq -e '.ok==true or .role=="ADMIN"'
          curl -sS -b /tmp/cookies.txt -F 'file=@audit/bilan_eleve.pdf' -F 'subject=MATHEMATIQUES' -F 'level=Terminale' http://localhost:3000/api/rag/upload | jq -e '.ok==true'

      - name: Teardown
        if: always()
        run: |
          docker compose logs --no-color > ops-check-docker-logs.txt || true
          docker compose down -v || true

      - name: Upload ops-check logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ops-check-logs
          path: ops-check-docker-logs.txt
          retention-days: 7
