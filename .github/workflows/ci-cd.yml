name: CI/CD

on:
  pull_request:
    branches: ['main']
  push:
    branches: ['main']
    tags:
      - 'v*.*.*'

env:
  NODE_VERSION: '20'
  PY_VERSION: '3.11'
  REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  IMAGE_PREFIX: nexus

jobs:
  lint-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install deps
        run: npm ci

      - name: ESLint
        run: npx eslint . --ext .ts,.tsx --max-warnings=0

      - name: Prettier check
        run: npx prettier -c "**/*.{ts,tsx,js,json,md,css,scss}"

      - name: Unit/Integration tests with coverage
        run: npm run test:coverage

      - name: Start PDF generator service (docker compose)
        run: |
          docker compose -f docker-compose.yml up -d --build pdf_generator_service

      - name: Run PDF generator integration test
        run: npm run test:integration -- __tests__/api/pdf-generator.test.ts

      - name: Stop PDF generator service
        if: always()
        run: |
          docker compose -f docker-compose.yml rm -fsv pdf_generator_service || true

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage
          if-no-files-found: ignore

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PY_VERSION }}

      - name: Install Python tooling
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black pip-audit

      - name: Lint Python
        run: |
          flake8 services
          black --check services

      - name: pip-audit
        run: |
          set -e
          for svc in services/*; do
            if [ -f "$svc/requirements.txt" ]; then
              echo "Auditing $svc"
              pip-audit -r "$svc/requirements.txt"
            fi
          done

      - name: Install Bandit
        run: pip install bandit

      - name: Bandit (Python security static analysis)
        run: bandit -r services -q || (echo "Bandit found issues" && exit 1)

      - name: npm audit
        run: npm audit --audit-level=high

      - name: Gitleaks - Detect secrets in repo
        uses: zricethezav/gitleaks-action@v2
        with:
          config-path: ''
          args: '--no-banner --redact'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    name: Build & Push Images
    runs-on: ubuntu-latest
    needs: [lint-test]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Compute image tag
        id: meta
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            VERSION="${GITHUB_SHA::12}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build & push app image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-app:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-app:latest

      - name: Build & push rag image
        uses: docker/build-push-action@v6
        with:
          context: ./services/rag_service
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-rag:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-rag:latest

      - name: Build & push llm image
        uses: docker/build-push-action@v6
        with:
          context: ./services/llm_service
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-llm:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-llm:latest

      - name: Build & push pdf image
        uses: docker/build-push-action@v6
        with:
          context: ./services/pdf_generator_service
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-pdf:${{ steps.meta.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-pdf:latest

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Compute version
        id: meta
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            cd ${{ secrets.VPS_WORKDIR }}
            docker login ${{ secrets.DOCKER_REGISTRY }} -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            export IMAGE_TAG=${{ steps.meta.outputs.version }}
            export REGISTRY=${{ secrets.DOCKER_REGISTRY }}
            export IMAGE_PREFIX=nexus
            docker compose pull
            docker compose up -d
            # Healthchecks
            curl -fsS http://localhost:3000/api/health || (echo "App healthcheck failed" && exit 1)
            curl -fsS http://localhost:8000/health || (echo "RAG healthcheck failed" && exit 1)
            curl -fsS http://localhost:8002/health || (echo "PDF healthcheck failed" && exit 1)
            curl -fsS http://localhost:8001/health || (echo "LLM healthcheck failed" && exit 1)

      - name: Rollback on failure
        if: failure()
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            cd ${{ secrets.VPS_WORKDIR }}
            docker compose -f docker-compose.rollback.yml up -d
