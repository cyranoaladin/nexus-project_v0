// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// √ânum√©ration des r√¥les utilisateur
enum UserRole {
  ADMIN
  ASSISTANTE
  COACH
  PARENT
  ELEVE
}

// √ânum√©ration des statuts d'abonnement
enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
}

// √ânum√©ration des types de prestations
enum ServiceType {
  COURS_ONLINE
  COURS_PRESENTIEL
  ATELIER_GROUPE
}

// √ânum√©ration des mati√®res
enum Subject {
  MATHEMATIQUES
  NSI
  FRANCAIS
  PHILOSOPHIE
  HISTOIRE_GEO
  ANGLAIS
  ESPAGNOL
  PHYSIQUE_CHIMIE
  SVT
  SES
}

// √ânum√©ration des statuts de session
enum SessionStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

// √ânum√©ration des types de paiement
enum PaymentType {
  SUBSCRIPTION
  CREDIT_PACK
  SPECIAL_PACK
}

// √ânum√©ration des statuts de paiement
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// --- Bilan p√©dagogique et QCM ---
model Bilan {
  id            String   @id @default(cuid())
  studentId     String
  student       Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)

  qcmRaw        Json
  qcmScores     Json     // { total, totalMax, byDomain: {points,max,percent} }
  pedagoRaw     Json
  pedagoProfile Json     // VAK/Kolb/rythme/motivation/difficult√©s/attentes
  synthesis     Json     // forces/faiblesses/risques/feuilleDeRoute
  offers        Json     // { primary, alternatives, reasoning }

  pdfUrl        String?
  pdfBlob       Bytes?

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("bilans")
}

// Mod√®le Utilisateur principal
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String?
  role      UserRole
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations sp√©cifiques selon le r√¥le
  parentProfile ParentProfile?
  studentProfile StudentProfile?
  student Student?
  coachProfile CoachProfile?

  // Relations communes
  sentMessages     Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  payments         Payment[]

  // Coach specific relations
  coachAvailabilities CoachAvailability[] @relation("CoachAvailability")
  coachSessions      SessionBooking[]    @relation("CoachSessions")

  // Student specific relations
  studentSessions    SessionBooking[]    @relation("StudentSessions")

  // Parent specific relations
  parentSessions     SessionBooking[]    @relation("ParentSessions")

  // Notification relations
  notifications      SessionNotification[] @relation("UserNotifications")

  @@map("users")
}

// Profil Parent
model ParentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations sp√©cifiques parent
  address String?
  city    String?
  country String? @default("Tunisie")

  // Relations
  children Student[]

  @@map("parent_profiles")
}

// Profil √âl√®ve
model StudentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations scolaires
  grade        String? // Classe (Seconde, Premi√®re, Terminale)
  school       String?
  birthDate    DateTime?

  @@map("student_profiles")
}

// Mod√®le √âl√®ve (entit√© m√©tier)
model Student {
  id       String @id @default(cuid())
  parentId String
  parent   ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations scolaires
  grade     String? // Classe
  school    String?
  birthDate DateTime?

  // Cr√©dits et sessions
  credits            Int @default(0)
  totalSessions      Int @default(0)
  completedSessions  Int @default(0)

  // Suivi d'usage freemium ARIA
  freemiumUsage Json?

  // Garantie Bac
  guaranteeEligible  Boolean   @default(false)
  guaranteeActivatedAt DateTime?

  // Relations
  subscriptions    Subscription[]
  creditTransactions CreditTransaction[]
  sessions         Session[]
  ariaConversations AriaConversation[]
  badges           StudentBadge[]
  reports          StudentReport[]
  subscriptionRequests SubscriptionRequest[]
  bilans           Bilan[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

// Profil Coach
model CoachProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Informations professionnelles
  title       String? // Agr√©g√©, Certifi√©, etc.
  pseudonym   String  @unique // H√©lios, Z√©non, etc.
  tag         String? // üéì Agr√©g√©, üéØ Strat√®ge, etc.
  description String?
  philosophy  String?
  expertise   String?

  // Sp√©cialit√©s (JSON string pour SQLite)
  subjects    String // JSON array des subjects

  // Disponibilit√©s
  availableOnline     Boolean @default(true)
  availableInPerson   Boolean @default(true)

  // Relations
  sessions    Session[]
  reports     StudentReport[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("coach_profiles")
}

// Mod√®le Abonnement
model Subscription {
  id        String             @id @default(cuid())
  studentId String
  student   Student            @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // D√©tails de l'abonnement
  planName      String // ACCES_PLATEFORME, HYBRIDE, IMMERSION
  monthlyPrice  Int    // Prix en TND
  creditsPerMonth Int  // Cr√©dits inclus par mois

  // Statut et dates
  status    SubscriptionStatus
  startDate DateTime
  endDate   DateTime?

  // Add-ons ARIA (JSON string pour SQLite)
  ariaSubjects String @default("[]") // JSON array des mati√®res ARIA activ√©es
  ariaCost     Int       @default(0) // Co√ªt mensuel des add-ons ARIA

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

// Mod√®le Transaction de Cr√©dits
model CreditTransaction {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  // D√©tails de la transaction
  type        String // MONTHLY_ALLOCATION, PURCHASE, USAGE, REFUND, EXPIRATION
  amount      Float  // Peut √™tre n√©gatif pour les utilisations
  description String

  // M√©tadonn√©es
  sessionId   String? // Si li√© √† une session
  expiresAt   DateTime? // Pour les cr√©dits avec expiration

  createdAt DateTime @default(now())

  @@map("credit_transactions")
}

// Mod√®le Session (Cours/Ateliers)
model Session {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  coachId String
  coach   CoachProfile @relation(fields: [coachId], references: [id])

  // D√©tails de la session
  type        ServiceType
  subject     Subject
  title       String
  description String?

  // Planification
  scheduledAt DateTime
  duration    Int      // Dur√©e en minutes
  location    String?  // Pour le pr√©sentiel ou lien visio

  // Co√ªt et statut
  creditCost Float
  status     SessionStatus @default(SCHEDULED)

  // Compte-rendu
  report      String?
  reportedAt  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

// Mod√®le Conversation ARIA
model AriaConversation {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  subject   Subject
  title     String?

  messages  AriaMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("aria_conversations")
}

// Mod√®le Message ARIA
model AriaMessage {
  id             String @id @default(cuid())
  conversationId String
  conversation   AriaConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  role    String // "user" ou "assistant"
  content String

  // Feedback utilisateur
  feedback Boolean? // true = üëç, false = üëé, null = pas de feedback

  createdAt DateTime @default(now())

  @@map("aria_messages")
}

// Mod√®le Badge
model Badge {
  id          String @id @default(cuid())
  name        String @unique
  description String
  category    String // ASSIDUITE, PROGRESSION, CURIOSITE
  icon        String?
  condition   String // Condition d'obtention

  // Relations
  studentBadges StudentBadge[]

  createdAt DateTime @default(now())

  @@map("badges")
}

// Mod√®le Attribution de Badge
model StudentBadge {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id])

  earnedAt DateTime @default(now())

  @@unique([studentId, badgeId])
  @@map("student_badges")
}

// Mod√®le Rapport √âl√®ve
model StudentReport {
  id        String @id @default(cuid())
  studentId String
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  coachId String
  coach   CoachProfile @relation(fields: [coachId], references: [id])

  // Contenu du rapport
  title       String
  content     String
  period      String // "Semaine du X", "Mois de Y", etc.

  // M√©triques
  sessionsCount    Int     @default(0)
  averageGrade     Float?
  progressNotes    String?
  recommendations  String?

  createdAt DateTime @default(now())

  @@map("student_reports")
}

// Mod√®le Paiement
model Payment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // D√©tails du paiement
  type        PaymentType
  amount      Float
  currency    String @default("TND")
  description String

  // Statut et m√©thode
  status PaymentStatus @default(PENDING)
  method String? // "konnect", "wise", "manual"

  // M√©tadonn√©es
  externalId String? @unique // ID de transaction externe
  metadata   Json?   // Donn√©es suppl√©mentaires

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("payments")
}

// Mod√®le Message (Chat)
model Message {
  id         String @id @default(cuid())
  senderId   String
  sender     User   @relation("MessageSender", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id])

  content    String
  fileUrl    String? // Pour les pi√®ces jointes
  fileName   String?

  readAt     DateTime?

  createdAt  DateTime @default(now())

  @@map("messages")
}

// Mod√®le Contenu P√©dagogique (pour ARIA)
model PedagogicalContent {
  id      String  @id @default(cuid())
  title   String
  content String
  subject Subject
  grade   String? // Niveau scolaire

  // M√©tadonn√©es pour la recherche vectorielle (JSON string pour SQLite)
  embedding String @default("[]") // JSON array pour vecteur d'embedding pour RAG
  tags      String @default("[]") // JSON array pour tags

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("pedagogical_contents")
}

// Mod√®le pour les demandes de modification d'abonnement
model SubscriptionRequest {
  id              String   @id @default(cuid())
  studentId       String
  requestType     String   // PLAN_CHANGE, ARIA_ADDON, INVOICE_DETAILS
  planName        String?
  monthlyPrice    Float
  reason          String?
  status          String   // PENDING, APPROVED, REJECTED
  requestedBy     String
  requestedByEmail String
  processedBy     String?
  processedAt     DateTime?
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@map("subscription_requests")
}

// Mod√®le pour les notifications syst√®me
model Notification {
  id          String   @id @default(cuid())
  userId      String   // ID de l'utilisateur qui re√ßoit la notification
  userRole    UserRole // R√¥le de l'utilisateur (ASSISTANTE, ADMIN, etc.)
  type        String   // SUBSCRIPTION_REQUEST, CREDIT_REQUEST, etc.
  title       String
  message     String
  data        String   // JSON string pour donn√©es suppl√©mentaires
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("notifications")
}

// Add these models to your existing schema

// Coach Availability Management
model CoachAvailability {
  id          String   @id @default(cuid())
  coachId     String
  coach       User     @relation("CoachAvailability", fields: [coachId], references: [id], onDelete: Cascade)

  // Day of week (0 = Sunday, 1 = Monday, etc.)
  dayOfWeek   Int
  startTime   String   // "09:00"
  endTime     String   // "17:00"

  // For specific dates (holidays, special availability)
  specificDate DateTime?
  isAvailable Boolean  @default(true)

  // Recurring pattern
  isRecurring Boolean  @default(true)
  validFrom   DateTime @default(now())
  validUntil  DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([coachId, dayOfWeek, startTime, endTime, specificDate])
  @@index([coachId, dayOfWeek])
  @@index([coachId, specificDate])
}

// Session Booking Management
model SessionBooking {
  id            String           @id @default(cuid())

  // Participants
  studentId     String
  student       User             @relation("StudentSessions", fields: [studentId], references: [id], onDelete: Cascade)
  coachId       String
  coach         User             @relation("CoachSessions", fields: [coachId], references: [id], onDelete: Cascade)
  parentId      String?
  parent        User?            @relation("ParentSessions", fields: [parentId], references: [id], onDelete: SetNull)

  // Session Details
  subject       Subject
  title         String
  description   String?

  // Scheduling
  scheduledDate DateTime
  startTime     String           // "14:00"
  endTime       String           // "15:00"
  duration      Int              // Duration in minutes

  // Status Management
  status        SessionStatus    @default(SCHEDULED)

  // Session Type
  type          SessionType      @default(INDIVIDUAL)
  modality      SessionModality  @default(ONLINE)

  // Location/Meeting Info
  meetingUrl    String?
  meetingId     String?
  location      String?

  // Credits & Payment
  creditsUsed   Int              @default(1)

  // Feedback & Notes
  coachNotes    String?
  studentNotes  String?
  rating        Int?             // 1-5 stars
  feedback      String?

  // Attendance
  studentAttended Boolean?
  coachAttended   Boolean        @default(true)

  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  completedAt   DateTime?
  cancelledAt   DateTime?

  // Relations
  notifications SessionNotification[]
  reminders     SessionReminder[]

  @@index([studentId, scheduledDate])
  @@index([coachId, scheduledDate])
  @@index([status, scheduledDate])
  @@index([scheduledDate])
}

// Notification System
model SessionNotification {
  id          String             @id @default(cuid())
  sessionId   String
  session     SessionBooking     @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Recipients
  userId      String
  user        User               @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  // Notification Details
  type        NotificationType
  title       String
  message     String

  // Status
  status      NotificationStatus @default(PENDING)
  sentAt      DateTime?
  readAt      DateTime?

  // Delivery Method
  method      NotificationMethod @default(EMAIL)

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@index([userId, status])
  @@index([sessionId])
}

// Reminder System
model SessionReminder {
  id          String         @id @default(cuid())
  sessionId   String
  session     SessionBooking @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  // Reminder Timing
  reminderType ReminderType
  scheduledFor DateTime

  // Status
  sent        Boolean        @default(false)
  sentAt      DateTime?

  createdAt   DateTime       @default(now())

  @@index([scheduledFor, sent])
  @@index([sessionId])
}

// Enums

enum SessionType {
  INDIVIDUAL
  GROUP
  MASTERCLASS
}

enum SessionModality {
  ONLINE
  IN_PERSON
  HYBRID
}

enum NotificationType {
  SESSION_BOOKED
  SESSION_CONFIRMED
  SESSION_REMINDER
  SESSION_CANCELLED
  SESSION_RESCHEDULED
  SESSION_COMPLETED
  COACH_ASSIGNED
  PAYMENT_REQUIRED
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

enum NotificationMethod {
  EMAIL
  SMS
  IN_APP
  PUSH
}

enum ReminderType {
  ONE_DAY_BEFORE
  TWO_HOURS_BEFORE
  THIRTY_MINUTES_BEFORE
  SESSION_STARTING
}

// Product & Pricing configuration
model ProductPricing {
  id          String   @id @default(cuid())
  itemType    String   // SUBSCRIPTION | ADDON | PACK
  itemKey     String   // e.g. HYBRIDE, IMMERSION, ARIA_SUBJECT, CREDITS_10
  amount      Int      // Prix en TND
  currency    String   @default("TND")
  description String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([itemType, itemKey])
  @@map("product_pricing")
}
